// Generated by CoffeeScript 1.3.3
(function() {
  var Database, portchecker, ravendb, spawn;

  ravendb = require('ravendb');

  spawn = require('child_process').spawn;

  portchecker = require('portchecker');

  Database = ravendb.Database;

  Database.prototype.useNTLM = function(domain, username, password, proxyHost, port, cb) {
    var defineGetPort, getPort,
      _this = this;
    if (proxyHost == null) {
      proxyHost = 'localhost';
    }
    if (port == null) {
      port = null;
    }
    if (cb == null) {
      cb = null;
    }
    this.setBasicAuthorization(username, password);
    if (this.ntlm != null) {
      if (cb != null) {
        cb(this.ntlm);
      }
      return;
    }
    defineGetPort = function(port, proxyHost) {
      var getPort;
      if (port != null) {
        getPort = function(getPortCallback) {
          return getPortCallback(port, proxyHost);
        };
      } else {
        getPort = function(getPortCallback) {
          return portchecker.getFirstAvailable(5000, 6000, proxyHost, getPortCallback);
        };
      }
      return getPort;
    };
    getPort = defineGetPort(port, proxyHost);
    return getPort(function(port, host) {
      var ntlmaps;
      try {
        ntlmaps = spawn('python', ["" + __dirname + "/../deps/ntlmaps/main.py", "--domain=" + domain, "--port=" + port]);
        _this.ntlm = ntlmaps;
        _this.ntlm.port = port;
        _this.ntlm.host = host;
        if (_this.ntlm != null) {
          _this.setProxy("http://" + _this.ntlm.host + ":" + _this.ntlm.port);
        }
        process.on('exit', function() {
          return ntlmaps.kill('SIGINT');
        });
        ntlmaps.stdout.on('data', function(data) {
          return console.log("ntlmaps stdout: " + data);
        });
        ntlmaps.stderr.on('data', function(data) {
          return console.error("ntlmaps stderr: " + data);
        });
        ntlmaps.on('exit', function(code) {
          _this.ntlm = null;
          _this.setProxy(null);
          if (code !== 0) {
            return console.error("ntlmaps exited with code " + code);
          }
        });
        if (cb != null) {
          return cb(true);
        }
      } catch (error) {
        if (cb != null) {
          return cb(false);
        }
      }
    });
  };

  module.exports = ravendb;

}).call(this);
